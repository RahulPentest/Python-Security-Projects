# < ------------ NOTES ------------ >
# steganography -> the art of hiding information within files, such as images, audio, or text

# the main goal is to embed a text message into an image by modifying the least significant bit (LSB) of the red value in each pixel,
#   first ensuring the LSB is 0, then replacing it with the next bit of the text’s binary representation. 
#   This process is repeated for each bit of the message across successive pixels.
#   - it does not have to be the red value of a pixel but it is commonly used because of its ability to hide data with minimal visual impact

# a pixel is represented by three numbers (Red, Green, Blue) between 0 and 255
#   - each number is made up of 8-bits

# a fork refers to creating a new project by copying an existing project's code and then developing and modifying it independently to add new features or make changes

# PIL -> python imaging library
# since PIL is outdated, Pillow is a fork of PIL and retains the import paths from PIL

# ... import Image -> a class which provides methods of opening, maniupulating, and saving image files

# .join(<iterable>) --> is used to concatenate each element in an iterable with a string
# .format(<integer>, "<padding character><padding character><format type>") --> is used to convert the integer to binary, returns a string
# ord(<character>) --> is used to return the unicode representation of the character, returns an integer
# chr(<integer>) --> is used to return character that the integer represents in unicode
# int(<binary sequence>) --> will convert the binary sequence to its integer value

# delimiter -> a specific sequence of characters used to mark the beginning or end of a segment of data

# when using image.getdata(), pixel values are provided one-by-one without being stored, 
#   so converting to a list with list() is necessary to retain and access all pixel values simultaneously for further manipulation.

# list(image.getdata()) will return in the format of [(<R, G, B>), (<R, G, B>), ....]
#   each tuple in the list represents a pixel
#   R, G, B comes as an integer value

# least significant bit (LSB) -> the rightmost bit in a binary number, represents the smallest value, has the least impact on the number's overall value
# most significant bit (MSB) -> the leftmost bit in a binary number, represents the highest value, has the greatest impact on the number's overall value

# bitwise NOT ~  --> is used to flip all the bits of an integer, example: ~<integer>
# bitwise AND &  --> compares each bit of two integers and returns 1 if both bits are 1, otherwise it returns 0. This operation is performed bit by bit.
# bitwase OR |   --> results in 1 if either of the bits being compared is 1; otherwise, it results in 0.

# when using bitwise operations in Python, the language automatically handles the binary representation of integers, so you don’t need to manually convert them to binary.

# range(start, stop, step):

# LSB steganography is not effective for JPEG because it uses lossy compression